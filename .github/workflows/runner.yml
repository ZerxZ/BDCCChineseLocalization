name: Build BDDC Chinese Localization Nightly
on:
  workflow_dispatch:
  schedule:
    - cron: '15 13 * * *'
  push:
  pull_request:

permissions: write-all

env:
  GODOT_VERSION: "3.5.2"
  PARATRANZ_TOKEN: ${{ secrets.PARATRANZ_TOKEN }}
  PARATRANZ_PROJECT: ${{ secrets.PARATRANZ_PROJECT }}
  EXPORT_NAME: BDCC
  CARGO_TERM_COLOR: always
  JAVA_VERSION: 1.8
  ANDROID_VERSION: 30
  ANDROID_NDK_VERSION: 22.1.7171670
  ANDROID_BUILD_TOOLS_VERSION: 30.0.3
  ANDROID_KEYSTORE_PATH: /root/production.jks
  ANDROID_KEYSTORE_ALIAS: ${{ secrets.ANDROID_KEYSTORE_ALIAS }}
  ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
  ANDROID_SDK_ROOT: /root/android-sdk
  
jobs:
  translate:
    name: 🌐 Translate
    runs-on: windows-latest
    steps:
      - name: Check Submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive
          lfs: true

      - name: Checkout BDCC-Localization-Replacer
        uses: actions/checkout@v4
        with:
          repository: HCPTangHY/BDCC-Localization-Replacer
          ref: main
          submodules: 'recursive'
          path: 'BDCC-Localization-Replacer'

      - name: Set up .NET Sdk
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Run translation
        run: dotnet run --project BDCCChineseLocalization Translate ${{ env.PARATRANZ_TOKEN }} ${{ env.PARATRANZ_PROJECT }}
      - name: Upload translation artifact
        uses: actions/upload-artifact@v4
        with:
          name: bdcc-chinese-translation
          path: ./BdccChineseLocalization.zip
          retention-days: 7
  
  window-build:
    name: 🏁 Windows Build
    needs: translate
    runs-on: ubuntu-20.04
    container:
      image: barichello/godot-ci:3.5.2
    steps:
      - name: Check Submodules
        uses: actions/checkout@v4
        with:
          lfs: true
      - name: Download translation artifact
        uses: actions/download-artifact@v4
        with:
          name: bdcc-chinese-translation
      - name: Unzip translation artifact
        run: unzip BdccChineseLocalization.zip -d ./BdccChineseLocalization
      - name: Setup
        run: |
          mkdir -v -p ~/.local/share/godot/templates
          mv /root/.local/share/godot/templates/${GODOT_VERSION}.stable ~/.local/share/godot/templates/${GODOT_VERSION}.stable
      - name: Build
        run: |
          mkdir -v -p ./build/windows
          cd BdccChineseLocalization
          godot --headless --export "Windows Desktop" ../build/windows/${EXPORT_NAME}.exe
      - name: Zip
        run: |
          cd ./build/windows/
          zip -r BDCC-Windows.zip .
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bdcc-windows
          path: ./build/windows/BDCC-Windows.zip
          retention-days: 7
  
  linux-build:
    name: 🐧 Linux Build
    needs: translate
    runs-on: ubuntu-20.04
    container:
      image: barichello/godot-ci:3.5.2
    steps:
      - name: Check Submodules
        uses: actions/checkout@v4
        with:
          lfs: true
      - name: Download translation artifact
        uses: actions/download-artifact@v4
        with:
          name: bdcc-chinese-translation
      - name: Unzip translation artifact
        run: unzip BdccChineseLocalization.zip -d ./BdccChineseLocalization
      - name: Setup
        run: |
          mkdir -v -p ~/.local/share/godot/templates
          ls /root/.local/share/godot/templates/${GODOT_VERSION}.stable
          mv /root/.local/share/godot/templates/${GODOT_VERSION}.stable ~/.local/share/godot/templates/${GODOT_VERSION}.stable
          ls ~/.local/share/godot/templates/${GODOT_VERSION}.stable
      - name: Build
        run: |
          mkdir -v -p ./build/linux
          cd BdccChineseLocalization
          godot --headless --export "Linux/X11" ../build/linux/${EXPORT_NAME}.x86_64
      - name: Zip
        run: |
          cd ./build/linux/
          zip -r BDCC-Linux.zip .
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bdcc-linux
          path: ./build/linux/BDCC-Linux.zip
          retention-days: 7
  
  macos-build:
    name: 🍎 MacOS Build
    needs: translate
    runs-on: ubuntu-20.04
    container:
      image: barichello/godot-ci:3.5.2
    steps:
      - name: Check Submodules
        uses: actions/checkout@v4
        with:
          lfs: true
      - name: Download translation artifact
        uses: actions/download-artifact@v4
        with:
          name: bdcc-chinese-translation
      - name: Unzip translation artifact
        run: unzip BdccChineseLocalization.zip -d ./BdccChineseLocalization
      - name: Setup
        run: |
          mkdir -v -p ~/.local/share/godot/templates
          mv /root/.local/share/godot/templates/${GODOT_VERSION}.stable ~/.local/share/godot/templates/${GODOT_VERSION}.stable
      - name: Build
        run: |
          mkdir -v -p ./build/macos
          cd BdccChineseLocalization
          godot --headless --export "Mac OSX" ../build/macos/${EXPORT_NAME}.zip
      - name: Zip
        run: |
          cd ./build/macos/
          zip -r BDCC-Macos.zip .
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bdcc-macos
          path: ./build/macos/BDCC-Macos.zip
          retention-days: 7
  
  web-build:
    name: 🌐 Web Build
    needs: translate
    runs-on: ubuntu-20.04
    container:
      image: barichello/godot-ci:3.5.2
    steps:
      - name: Check Submodules
        uses: actions/checkout@v4
        with:
          lfs: true
      - name: Download translation artifact
        uses: actions/download-artifact@v4
        with:
          name: bdcc-chinese-translation
      - name: Unzip translation artifact
        run: unzip BdccChineseLocalization.zip -d ./BdccChineseLocalization
      - name: Setup
        run: |
          mkdir -v -p ~/.local/share/godot/templates
          mv /root/.local/share/godot/templates/${GODOT_VERSION}.stable ~/.local/share/godot/templates/${GODOT_VERSION}.stable
      - name: Build
        run: |
          mkdir -v -p ./build/web
          cd BdccChineseLocalization
          godot --headless --export "HTML5" ../build/web/index.html
      - name: Zip
        run: |
          cd ./build/web/
          zip -r BDCC-WEB.zip .
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bdcc-web
          path: ./build/web/BDCC-WEB.zip
          retention-days: 7
  android-build:
    name: 🤖 Android Build
    needs: translate
    runs-on: ubuntu-20.04
    container:
      image: barichello/godot-ci:3.5.2
    steps:
      - name: Check Submodules
        uses: actions/checkout@v4
        with:
          lfs: true
      - name: Download translation artifact
        uses: actions/download-artifact@v4
        with:
          name: bdcc-chinese-translation
      - name: Unzip translation artifact
        run: unzip BdccChineseLocalization.zip -d ./BdccChineseLocalization
      - name: Setup
        run: |
          mkdir -v -p ~/.local/share/godot/templates
          mv /root/.local/share/godot/templates/${GODOT_VERSION}.stable ~/.local/share/godot/templates/${GODOT_VERSION}.stable
      - name: Setup Keystore
        run: |
            echo "${{ secrets.ANDROID_KEYSTORE_FILE }}" | base64 --decode > ${{ env.ANDROID_KEYSTORE_PATH }}
      - name: Install aarch64 android rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: aarch64-linux-android
          profile: minimal
      - name: Install x86_64 android rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-linux-android
          profile: minimal
      - name: Install armv7 android rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: armv7-linux-androideabi
          profile: minimal
      - name: Install i686 android rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: i686-linux-android
          profile: minimal
      - name: Setup JDK ${{env.JAVA_VERSION}}
        uses: actions/setup-java@v4
        with:
          java-version: ${{env.JAVA_VERSION}}
      - name: Cache android toolchain and packages
        id: android-cache
        uses: actions/cache@v4
        with:
            path: ~/.android
            key: ${{runner.os}}-android-${{env.ANDROID_BUILD_TOOLS_VERSION}}-${{env.ANDROID_NDK_VERSION}}
            restore-keys: |
              ${{runner.os}}-android-${{env.ANDROID_BUILD_TOOLS_VERSION}}-
              ${{runner.os}}-android-
      - name: Setup Android SDK
        uses: android-actions/setup-android@v2
      - name: Install Android build tools
        run: |
          sdkmanager "build-tools;${ANDROID_BUILD_TOOLS_VERSION}"
          sdkmanager "ndk;${ANDROID_NDK_VERSION
      - name: Install build essentials
        run: apt-get update && apt-get install -y --no-install-recommends build-essential clang llvm-dev libclang-dev g++-multilib gcc-multilib libc6-dev libc6-dev-arm64-cro
      - name: Compile native lib for aarch64 android
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --manifest-path source/native/Cargo.toml --target aarch64-linux-android --release
        env:
          CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER: ${{env.ANDROID_SDK_ROOT}}/ndk/${{env.ANDROID_NDK_VERSION}}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android${{env.ANDROID_VERSION}}-clang
          CARGO_TARGET_DIR: source/native/target
      - name: Compile native lib for x86_64 android
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --manifest-path source/native/Cargo.toml --target x86_64-linux-android --release
        env:
          CARGO_TARGET_X86_64_LINUX_ANDROID_LINKER: ${{env.ANDROID_SDK_ROOT}}/ndk/${{env.ANDROID_NDK_VERSION}}/toolchains/llvm/prebuilt/linux-x86_64/bin/x86_64-linux-android${{env.ANDROID_VERSION}}-clang
          CARGO_TARGET_DIR: source/native/target
      - name: Compile native lib for armv7 android
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --manifest-path source/native/Cargo.toml --target armv7-linux-androideabi --release
        env:
          CARGO_TARGET_ARMV7_LINUX_ANDROIDEABI_LINKER: ${{env.ANDROID_SDK_ROOT}}/ndk/${{env.ANDROID_NDK_VERSION}}/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi${{env.ANDROID_VERSION}}-clang
          CARGO_TARGET_DIR: source/native/target
      - name: Compile native lib for i686 android
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --manifest-path source/native/Cargo.toml --target i686-linux-android --release
        env:
          CARGO_TARGET_I686_LINUX_ANDROID_LINKER: ${{env.ANDROID_SDK_ROOT}}/ndk/${{env.ANDROID_NDK_VERSION}}/toolchains/llvm/prebuilt/linux-x86_64/bin/i686-linux-android${{env.ANDROID_VERSION}}-clang
          CARGO_TARGET_DIR: source/native/target

      - name: Build
        run: |
          
          mkdir -v -p ./build/android
          cd BdccChineseLocalization
          godot -e -q
          echo 'export/android/android_sdk_path = "'${ANDROID_SDK_ROOT}'"' >> ~/.config/godot/editor_settings-3.tres
          echo 'export/android/debug_keystore = "/root/debug.keystore"' >> ~/.config/godot/editor_settings-3.tres
          echo 'export/android/debug_keystore_user = "androiddebugkey"' >> ~/.config/godot/editor_settings-3.tres
          echo 'export/android/debug_keystore_pass = "android"' >> ~/.config/godot/editor_settings-3.tres
          echo 'export/android/force_system_user = false' >> ~/.config/godot/editor_settings-3.tres
          echo 'export/android/shutdown_adb_on_exit = true' >> ~/.config/godot/editor_settings-3.tres
          godot --headless --export-debug "Android Debug" ../build/android/${EXPORT_NAME}-debug.apk
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bdcc-android
          path: ./build/android/BDCC-Android-debug.apk
  
  
  release:
    name: 🚀 Release
    needs: [ window-build, linux-build, macos-build, web-build ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.1.1
      - name: Download Godot Artifact
        uses: actions/download-artifact@v4.1.4
        with:
          pattern: 'bdcc-*'
          merge-multiple: true
      - name: Set Release version env variable
        id: release-selector
        run: |
          echo "RELEASE_VERSION=$(date "+%y.%m.%d")" >> $GITHUB_OUTPUT
      - name: Automatic Pre Releases
        uses: ncipollo/release-action@v1.14.0
        with:
          tag: "pre-latest"
          prerelease: true
          name: "Pre-Release ${{ env.RELEASE_VERSION }}"
          allowUpdates: true
          artifacts: |
            *.zip
      - name: Automatic Releases
        uses: ncipollo/release-action@v1.14.0
        env:
          RELEASE_VERSION: ${{ steps.release-selector.outputs.RELEASE_VERSION }}
        with:
          tag: "bdcc.${{ env.RELEASE_VERSION }}"
          prerelease: false
          name: "Bdcc Release ${{ env.RELEASE_VERSION }}"
          allowUpdates: true
          artifacts: |
            *.zip  
